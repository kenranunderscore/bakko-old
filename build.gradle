apply plugin: 'kotlin'
apply plugin: 'java'

group 'kenran'
version 'v0.3'

buildscript {
    ext.kotlin_version = '1.2.10'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile files('lib/robocode.jar')
}

def gitHash = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def robotVersion = "${project.version}.${gitHash}"

jar.archiveName = "${group}.${name}_${robotVersion}.jar"

task copyKotlinRuntime(type: Copy) {
    def configuration = project.configurations.getByName("compile")
    def allDependencies = configuration.getResolvedConfiguration().getResolvedArtifacts().collect() {
        return it.file
    }
    def kotlinClassesDir = sourceSets.main.output.getClassesDirs().find {
        it.toString().contains("kotlin")
    }

    allDependencies.each {
        println "Checking dependency ${it.name}"
        from zipTree(it)
    }
    into kotlinClassesDir
}

task createPropertiesFile {
    doLast {
        def kotlinClassesDir = sourceSets.main.output.getClassesDirs().find() {
            it.toString().contains("kotlin")
        }
        def targetFile = file("${kotlinClassesDir}/kenran/${project.name}.properties")
        if (!targetFile.parentFile.exists()) {
            targetFile.parentFile.mkdirs()
        }

        def writer = targetFile.newWriter()
        writer << "robot.description=Nothing interesting yet\n"
        writer << "robocode.version=1.9\n"
        writer << "robot.java.source.included=true\n"
        writer << "robot.version=${robotVersion}\n"
        writer << "robot.author.name=kenran\n"
        writer << "robot.classname=kenran.${project.name}\n"
        writer << "robot.name=${project.name}\n"
        writer.flush()
        writer.close()
    }
}

task copyJarToRobocodeDir(type: Copy) {
    from "build/libs/${jar.archiveName}"
    into "d:/robocode/robots"
}

task compileAndCopy {}
compileAndCopy.dependsOn compileKotlin
compileAndCopy.dependsOn copyKotlinRuntime

jar.dependsOn createPropertiesFile
jar.dependsOn copyKotlinRuntime
build.finalizedBy copyJarToRobocodeDir